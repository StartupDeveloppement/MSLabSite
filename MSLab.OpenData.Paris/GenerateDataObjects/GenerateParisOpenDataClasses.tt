<#@ template debug="false" hostspecific="true" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ assembly name="$(SolutionDir)\MSLab.OpenData.Paris\bin\Release\MSLab.OpenData.Paris.Business.dll" #>
<#@ assembly name="$(SolutionDir)\MSLab.OpenData.Paris\bin\Release\MSLab.OpenData.Paris.Data.dll" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="MSLab.OpenData.Paris.Connexion" #>
<#@ import namespace="MSLab.OpenData.Paris.Data" #>
<#@ import namespace="System.Threading.Tasks" #>
<#@ import namespace="System.Text.RegularExpressions" #>
<#@ output extension=".cs" #>
using System;
using System.Collections.Generic;
using System.Net.Http.Headers;
using Newtonsoft.Json;
using MSLab.OpenData.Paris.Data;
using MSLab.OpenData.Paris.Connexion;

namespace MSLab.OpenData.Paris.Business.GeneratedClasses
{	
<#
var datasets = Connect();
List<string> listDatasets = new List<string>();

foreach (var dataset in datasets.Result)
{
listDatasets.Add(dataset.datasetid.Replace("-",""));
#>

	public class <#= dataset.datasetid.Replace("-","") #> 
	{
        public static int recordNumber =<#= dataset.metas.records_count #>;

        public static string datasetid ="<#=dataset.datasetid#>";
	<#
	foreach (var field in dataset.fields)
	{
	if (!string.IsNullOrWhiteSpace(field.name))
	{
	#>
	<#= GetProperty(field) #>		
	<#
	}
	}
	#>	
	}
<#
}
#>
	public class ParisOpenDataContext : IDisposable
	{
		private MediaTypeWithQualityHeaderValue jsonHeader ;
		private ParisOpenData dataParis;
		private bool disposed = false;

		public ParisOpenDataContext()
        {
            dataParis = new ParisOpenData();
            jsonHeader = new MediaTypeWithQualityHeaderValue("application/json");
        }
	
	<#
	foreach (var datasetName in listDatasets)
	{
	#>
	public IEnumerable<Record<<#=datasetName#>>> <#=datasetName#>Dataset
		{ 
			get 
			{
				List<Record<<#=datasetName#>>> result = new List<Record<<#=datasetName#>>>();
                List<string> resultatJsonBrut = new List<string>();
				for (int i = 0; i < <#=datasetName#>.recordNumber; i+=10000)
                {
                    resultatJsonBrut.Add(dataParis.getRecords(<#=datasetName#>.datasetid, <#=datasetName#>.recordNumber,i));
                }

				if (resultatJsonBrut==null)
				{
					return null;
				}
				else
				{
					foreach (var jsonResult in resultatJsonBrut)
					{
						foreach (var recordList in JsonConvert.DeserializeObject<DatasetData<<#=datasetName#>>>(jsonResult).records)
						{
							result.Add(recordList);
						} 
					}
					return result;
				}			
			}
		}
	<#
	}
	#>	
		public void Dispose()
		{
			Dispose(true);
			GC.SuppressFinalize(this);
		}

		protected virtual void Dispose(bool disposing)
		{
			if (!disposed)
			{
				if (disposing)
				{
				}
				disposed = true;
			}
		}
	}
}

<#+
public static async Task<List<Dataset>> Connect()
{
return await GetResult();
}
#>

<#+
public static async Task<List<Dataset>>  GetResult()
{
ParisOpenData dataParis = new ParisOpenData();
return await dataParis.GetDatasets();
}
#>


<#+
public static string convertType(string type)
{
	if (type.Equals("text"))
	{
		return "string";
	}
	if (type.Equals("int"))
	{
		return "int";
	}
	if (type.Equals("date") || type.Equals("datetime"))
	{
		return "DateTime";
	}
	if (type.Equals("double"))
	{
		return "double";
	}
	if (type.Equals("geo_point_2d"))
	{
		return "List<double>";
	}
	if (type.Equals("geo_shape"))
	{
		return "GeoShape";
	}
	if (type.Equals("file"))
	{
		return "string";
	}
	return type;
}
#>

<#+
public static int convertToInt(string stringToConvert)
{
return Convert.ToInt32(stringToConvert);
}
#>

<#+
public static string GetProperty(Field field)
{
if (field.name.Equals("public") || field.name.Equals("pim"))
{
	return "";
}

if (Regex.IsMatch(field.name, @"^\d"))
{
return "";
} 

return string.Format("public {0} {1} {2}", convertType(field.@type), field.name, "{ get; set; }");
}
 #>

